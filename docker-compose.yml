version: '3.8'

services:
  db:
    image: postgres:13
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  web2:
    command: >
      sh -c "python manage.py makemigrations &&
              python manage.py migrate --no-input &&
              python manage.py collectstatic --noinput &&
              DJANGO_SUPERUSER_PASSWORD=$SUPER_USER_PASSWORD python manage.py createsuperuser --username $SUPER_USER_NAME --email $SUPER_USER_EMAIL --noinput &&
              gunicorn task_manager.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static:/static
      - media:/media
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    build:
      context: .
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/admin || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 5m

  nginx:
    image: nginx:latest
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${EMAIL}
    volumes:
      - static:/static
      - media:/media
      - /etc/letsencrypt:/etc/letsencrypt
      - ./nginx:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443" 
    depends_on:
      web2:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/admin || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 5m

  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./nginx:/etc/nginx/conf.d
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      nginx:
        condition: service_healthy

volumes:
  postgres_data:
  static:
  media:
